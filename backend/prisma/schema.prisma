generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  bankAccounts BankAccount[]
  categories   Category[]
  transactions Transaction[]

  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model BankAccount {
  id             String          @id @default(uuid())
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  name           String
  initialBalance Float           @map("initial_balance")
  type           BankAccountType
  color          String
  transactions   Transaction[]

  @@map("bank_accounts")
}

model Category {
  id           String        @id @default(uuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  name         String
  icon         String
  transactions Transaction[]

  @@map("categorys")
}

model Transaction {
  id            String          @id @default(uuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bankAccountId String
  bankAccount   BankAccount     @relation(fields: [bankAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId    String?
  category      Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  name          String
  value         Float
  date          DateTime
  type          TransactionType

  @@map("transaction")
}

enum BankAccountType {
  CHECKING
  INVESTIMENT
  CASH

  @@map("bank_account_type")
}

enum TransactionType {
  INCOME
  EXPENSE

  @@map("transaction_type")
}
